
import qualified LamParser
import Control.Monad (unless) 
import System.IO
import Lam


parse :: String -> Program
parse = LamParser.parseExpr

main :: IO ()
main = repl []

repl :: [String] -> IO ()
repl ls = do
        input <- read'
        
        let env = case input of
                  ":env" -> ls
                  ":q" -> ls
                  _ -> (ls ++ [compile input])
        
        unless (input == ":q")
           $ cases env (input) 
          >> repl env 
         
read' :: IO String
read' = putStr "wu> "
     >> hFlush stdout
     >> getLine         
           
eval' :: String -> String
eval' input = compile input

compile x = show (parse x)
 --   pprint . convert . liftLambdas . l2db .  parse

print' = putStrLn
           

cases :: [String] -> String -> IO ()
cases env str = case str of
               ":env" -> print' ( env)
               _ ->  print' (eval' str)

