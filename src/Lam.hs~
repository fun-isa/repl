

module Lam where

type Program =  [Stm] 
                 
type VarList =  [Id] 
type ParList =  [Exp] 

data Stm = Fun Id ParList Exp
         | Sin Exp
         deriving (Eq, Show)

data Exp =  App Exp Exp
         |  Lam String Exp
         |  Num Int
         |  Sym String 
         |  Alu Op
         deriving(Show,Eq) 
         
data Op = Add
        | Sub
        | Mul
        | Div
        deriving (Show, Eq)

mkAbs :: Exp -> ParList -> Exp
mkAbs ex [] = ex
mkAbs ex ((Sym x):xs) = mkAbs (Lam x ex) xs  







